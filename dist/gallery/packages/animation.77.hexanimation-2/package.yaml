version: v1
metadata:
  name: Hexanimation 2
  description: "Mouse vertical position controls pattern size when you click.  "
  author: Dillon
  source: https://codepen.io/Dillo/pen/poBXvgg
  tags:
    - interactive
helpers:
  insert_baseurl: true
template: >
  <!DOCTYPE html>

  <html lang="en">
    <head>
      <meta charset="UTF-8" />
      <title>Hexanimation 2</title>
      <style>
        body {
          font-family: Arial, Helvetica, "Liberation Sans", FreeSans, sans-serif;
          background-color: #000;
          margin: 0;
          padding: 0;
          border-width: 0;
          overflow: hidden;
          cursor: pointer;
        }
      </style>
    </head>
    <body>
      <script>
        "use strict";

        let canv, ctx; // canvas and context
        let maxx, maxy; // canvas dimensions

        let radius; // hexagons radius (and side length)
        let grid; // array of hexagons
        let nbx, nby; // grid size (in elements, not pixels)
        let orgx, orgy;
        let perx, pery, pergrid;
        let speed = 1; // pixels / ms
        let bg;
        let relY = 0.5;

        // to create a non linear (linear by ranges) relationship between mouse position and speed
        const POSSPEED = [0, 0.05, 0.5, 0.8, 0.94, 0.95, 1.0];
        const VALSPEED = [0, 0, 1, 5, 100, 1000, 1000];

        let nbLines, trackWidth, relTrackWidth;
        let lines;

        // for animation
        let messages;

        // shortcuts for Math.
        const mrandom = Math.random;
        const mfloor = Math.floor;
        const mround = Math.round;
        const mceil = Math.ceil;
        const mabs = Math.abs;
        const mmin = Math.min;
        const mmax = Math.max;

        const mPI = Math.PI;
        const mPIS2 = Math.PI / 2;
        const mPIS3 = Math.PI / 3;
        const m2PI = Math.PI * 2;
        const m2PIS3 = (Math.PI * 2) / 3;
        const msin = Math.sin;
        const mcos = Math.cos;
        const matan2 = Math.atan2;

        const mhypot = Math.hypot;
        const msqrt = Math.sqrt;

        const rac3 = msqrt(3);
        const rac3s2 = rac3 / 2;

        //------------------------------------------------------------------------

        function alea(mini, maxi) {
          // random number in given range

          if (typeof maxi == "undefined") return mini * mrandom(); // range 0..mini

          return mini + mrandom() * (maxi - mini); // range mini..maxi
        }
        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        function intAlea(mini, maxi) {
          // random integer in given range (mini..maxi - 1 or 0..mini - 1)
          //
          if (typeof maxi == "undefined") return mfloor(mini * mrandom()); // range 0..mini - 1
          return mini + mfloor(mrandom() * (maxi - mini)); // range mini .. maxi - 1
        }

        function lerp(p0, p1, alpha) {
          return {
            x: p0.x * (1 - alpha) + p1.x * alpha,
            y: p0.y * (1 - alpha) + p1.y * alpha,
          };
        }

        //------------------------------------------------------------------------

        class Hexagon {
          constructor(kx, ky) {
            this.kx = kx;
            this.ky = ky;
            //        this.rot = intAlea(6); // random orientation
            this.rot = pergrid[ky % pery][kx % perx];

            this.exits = [];
            this.arcType = [];
            for (let k = 0; k < 6; ++k) {
              let v = [5, null, 0, 2, null, 3][(k - this.rot + 6) % 6];
              if (v === null) this.exits[k] = null;
              else this.exits[k] = (v + this.rot) % 6;
              this.arcType[k] = ["s", null, "b", "s", null, "b"][
                (k - this.rot + 6) % 6
              ]; // small or big
            } // for k
          } // Hexagon.constructor

          // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

          size() {
            // coordinates of centre
            this.xc = orgx + this.kx * 1.5 * radius;
            this.yc = orgy + this.ky * radius * rac3;
            if (this.kx & 1) this.yc -= radius * rac3s2; // odd columns, centre is a bit higher

            this.vertices = new Array(6).fill(0).map((v, k) => ({
              x: this.xc + radius * mcos(((k - 2) * mPI) / 3),
              y: this.yc + radius * msin(((k - 2) * mPI) / 3),
            }));
            this.vertices[6] = this.vertices[0]; // makes things easier by avoiding many "% 6" in calculating other calculations

            this.middle = new Array(6)
              .fill(0)
              .map((p, k) => lerp(this.vertices[k], this.vertices[k + 1], 0.5));

            this.extCenters = new Array(6).fill(0).map((v, k) => ({
              x: this.xc + rac3 * radius * mcos(((k - 1) * mPI) / 3 - mPIS2),
              y: this.yc + rac3 * radius * msin(((k - 1) * mPI) / 3 - mPIS2),
            }));

            // initial angle
            this.a0 = (this.rot * mPI) / 3; // angle shift due to cell orientation
          } // Hexagon.prototype.size

          // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

          drawHexagon() {
            ctx.beginPath();
            this.vertices.forEach((p, k) => {
              if (k == 0) ctx.moveTo(p.x, p.y);
              else ctx.lineTo(p.x, p.y);
            });
            ctx.lineWidth = 0.5;
            ctx.strokeStyle = "#fff";
            ctx.stroke();
          } // Hexagon.prototype.drawHexagon

          // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

          getNeighbor(edge) {
            const kx = this.kx + [0, 1, 1, 0, -1, -1][edge];
            const ky =
              this.ky +
              [
                [-1, 0, 1, 1, 1, 0],
                [-1, -1, 0, 1, 0, -1],
              ][this.kx & 1][edge];
            if (kx < 0 || kx >= nbx || ky < 0 || ky >= nby) return false;
            return grid[ky][kx];
          }
          // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
          setNeighbors() {
            this.neighbors = [];
            for (let k = 0; k < 6; ++k) {
              this.neighbors[k] = this.getNeighbor(k);
            } // for k
          } // setNeighbors
        } //class Hexagon

        //-----------------------------------------------------------------------------
        //-----------------------------------------------------------------------------

        function createGrid() {
          let line;

          perx = intAlea(1, 6);
          pery = intAlea(1, 5);
          perx = nbx;
          pery = nby;

          pergrid = [];
          for (let ky = 0; ky < pery; ++ky) {
            pergrid[ky] = line = []; // new line
            for (let kx = 0; kx < perx; ++kx) {
              line[kx] = intAlea(3);
            } // for let kx
          } // for ky

          grid = [];
          for (let ky = 0; ky < nby; ++ky) {
            grid[ky] = line = []; // new line
            for (let kx = 0; kx < nbx; ++kx) {
              line[kx] = new Hexagon(kx, ky);
              line[kx].size();
            } // for let kx
          } // for ky
        } // createGrid
        //-----------------------------------------------------------------------------
        function makeLines() {
          /* creates description of line - not actuals lines with actual coordinates, just the relation between consecutive arcs in successive cells.
           */
          grid.forEach((line) =>
            line.forEach((cell) => (cell.lines = new Array(6))),
          );

          let lines = [];
          // open lines first
          grid.forEach((row) =>
            row.forEach((cell) => {
              for (let edge = 0; edge < 6; ++edge) {
                if (cell.exits[edge] === null) continue; // no line to begin here
                let neigh = cell.neighbors[edge];
                if (!neigh || neigh.exits[(edge + 3) % 6] === null) {
                  // check this is actually the start of a line
                  lines.push(makeLine(cell, edge));
                } // if true start
              } // for edge
            }),
          );
          // remaining lines (closed)
          // open lines first
          grid.forEach((row) =>
            row.forEach((cell) => {
              for (let edge = 0; edge < 6; ++edge) {
                if (cell.exits[edge] === null) continue; // no line to begin here
                if (cell.lines[edge]) continue; // already a line here;
                lines.push(makeLine(cell, edge));
              } // for edge
            }),
          );

          return lines;
        } // makeLines

        //-----------------------------------------------------------------------------
        function makeLine(cell, edge) {
          /* creates a line entering this cell by this edge. */

          const line = { hue: intAlea(360), sat: intAlea(50, 100), segments: [] };
          let rcell = cell,
            redge = edge; // running cell and edge
          let segment;
          do {
            segment = { cell: rcell, kentry: redge };
            rcell.lines[redge] = line;
            line.segments.push(segment);
            let opp = rcell.exits[redge];
            segment.kexit = opp;
            let ncell = rcell.neighbors[opp];
            if (ncell === false) break; // end of line - no cell beyond exit edge
            if (ncell.exits[(opp + 3) % 6] === null) break; // end of line - no line starting here in next cell
            rcell = ncell;
            redge = (opp + 3) % 6;
            if (rcell == cell && redge == edge) {
              // back to start
              line.closed = true; // end of closed line
              break;
            }
          } while (true);
          return line;
        } // makeLine

        //-----------------------------------------------------------------------------
        function getLinePath(line, k) {
          const path = new Path2D();
          line.segments.forEach((segment) => {
            segment.arc.addPath(path, k);
          });
          if (line.closed) path.closePath();
          return path;
        }
        //-----------------------------------------------------------------------------
        //-----------------------------------------------------------------------------
        class Arc {
          constructor(c, radius, a0, a1, ccw) {
            if (!c) return this; // empty arcs allowed
            this.c = c;
            this.radius = radius; // this is the radius at the middle width of the arc - actual radius depends on k ("track" index)
            this.a0 = a0; // 1st angle
            this.a1 = a1;
            this.ccw = ccw;
            // evaluate length
            if (ccw) [a0, a1] = [a1, a0];
            let len = (a1 - a0) % m2PI;
            if (len < 0) len += m2PI;
            this.deltaAng = ccw ? -len : len;
            this.len = len * radius;
          }
          addPath(path, k) {
            const dr = ((nbLines - 1) / 2 - k) * trackWidth;
            const radius = this.radius + (this.ccw ? -dr : dr);
            path.arc(this.c.x, this.c.y, radius, this.a0, this.a1, this.ccw);
          }

          addPathPartial(path, k, headPos, tailPos) {
            const dr = ((nbLines - 1) / 2 - k) * trackWidth;
            const radius = this.radius + (this.ccw ? -dr : dr);
            let a0 = this.a0,
              a1 = this.a1;
            /*
                  if (headPos < this.pos1) {
                    a1 = (headPos - this.pos0) / (this.pos1 - this.pos0) * this.deltaAng + this.a0;
                  }
                  if (tailPos >= this.pos0) {
                    a0 = (tailPos - this.pos0) / (this.pos1 - this.pos0) * this.deltaAng + this.a0;
                  }
          */
            let da0 = 0,
              da1 = 1;
            if (headPos < this.pos1) {
              da1 = (headPos - this.pos0) / (this.pos1 - this.pos0);
            }
            if (tailPos >= this.pos0) {
              da0 = (tailPos - this.pos0) / (this.pos1 - this.pos0);
            }
            if (da0 > da1) da0 = da1 - 0.001;
            a0 = da0 * this.deltaAng + this.a0;
            a1 = da1 * this.deltaAng + this.a0;
            path.arc(this.c.x, this.c.y, radius, a0, a1, this.ccw);
          }
          reverse() {
            [this.a0, this.a1] = [this.a1, this.a0];
            this.ccw = !this.ccw;
            this.deltaAng = -this.deltaAng;
          }
        } // class Arc
        //-----------------------------------------------------------------------------
        function reverseLine(line) {
          line.reverse = !line.reverse;
          line.segments.reverse().forEach((segment) => {
            [segment.kentry, segment.kexit] = [segment.kexit, segment.kentry];
            segment.arc.reverse();
          });
        }

        //-----------------------------------------------------------------------------
        class MotionPath {
          constructor(line) {
            let newArc, newRadius, newAngle, arcLength, newCenter, newa0;
            line.motionPath = this;
            this.line = line;
            this.movingLength = alea(2, 6) * radius;

            if (intAlea(2)) reverseLine(line); // randomly reverse lines
            /* creates set of arcs starting out of the display and ending at the beginning of the line
          of course, arc is created moving backwards, starting from line and ending out of the screen
          this set of arcs can be emtpty, for lines which already have parts out of the display area
          */
            this.arcs = [];
            let currArc = line.segments[0].arc;
            while (true) {
              let px = currArc.c.x + currArc.radius * mcos(currArc.a0);
              if (px < -radius / 2 - 1 || px > maxx + radius / 2 + 1) break; // out of screen
              let py = currArc.c.y + currArc.radius * msin(currArc.a0);
              if (py < -radius / 2 - 1 || py > maxy + radius / 2 + 1) break; // out of screen;
              /* create a previous arc with random radius and angle, but ccw opposite to current arc */
              do {
                newRadius = ((nbLines + 1) / 2) * trackWidth + alea(1.5 * radius);
                newAngle = alea((2 * mPI) / 3);
                arcLength = newRadius * newAngle;
              } while (arcLength < 0.4 * radius || arcLength > 3 * radius);
              // calculate new center position
              newCenter = {
                x: currArc.c.x + (currArc.radius + newRadius) * mcos(currArc.a0),
                y: currArc.c.y + (currArc.radius + newRadius) * msin(currArc.a0),
              };
              newa0 =
                (currArc.a0 + mPI + (currArc.ccw ? -1 : 1) * newAngle) % m2PI;
              newArc = new Arc(
                newCenter,
                newRadius,
                newa0,
                (currArc.a0 + mPI) % m2PI,
                !currArc.ccw,
              );
              this.arcs.unshift(newArc);
              currArc = newArc;
            } // while true

            // append shallow copies of original line's arcs
            this.colors = [];
            for (let k = 0; k < nbLines; ++k) {
              let nk = line.reverse ? nbLines - 1 - k : k;
              let alpha = nbLines == 1 ? 0.5 : nk / (nbLines - 1);
              this.colors[k] =
                `hsl(${line.hue} ${line.sat}% ${80 - 50 * alpha}%)`;
            }
            line.segments.forEach((seg) =>
              this.arcs.push(Object.assign(new Arc(), seg.arc)),
            );
            /*
          ctx.lineWidth = trackWidth - 0.5;
          for (let k = 0; k < nbLines; ++k) {
            let path = new Path2D();
            this.arcs.forEach(arc => arc.addPath(path, k));
            ctx.strokeStyle = this.colors[k];
            ctx.stroke(path);
          }
  */
            // complete arcs descriptions with length, initial and final distance from MotionPath starting point

            let curr = 0;
            this.arcs.forEach((arc) => {
              arc.pos0 = curr;
              curr += arc.len;
              arc.pos1 = curr;
            });
            this.lineLength = this.line.segments.reduce(
              (s, v) => s + v.arc.len,
              0,
            );

            this.headEndPoint = this.arcs.at(-1).pos1;
            this.tailEndPoint = this.headEndPoint - this.lineLength;
          } // constructor

          start(time) {
            this.prevTime = time;
            this.vHeadPos = 0;
          }

          draw(time) {
            if (this.prevTime === undefined) return;
            const dt = time - this.prevTime;
            this.prevTime = time;
            this.vHeadPos += dt * speed;
            this.headPos = mmax(0, this.vHeadPos);
            if (this.headPos > this.headEndPoint) {
              this.headPos = this.headEndPoint;
              this.doneHead = true;
            }

            let tailPos = mmax(0, this.vHeadPos - this.movingLength);
            if (tailPos > this.tailEndPoint) {
              tailPos = this.tailEndPoint;
              this.doneTail = true;
            }
            const kHead = this.arcs.findLastIndex(
              (arc) => arc.pos0 <= this.headPos,
            ); // index of arc where head currently is
            const kTail = this.arcs.findIndex((arc) => arc.pos1 > tailPos); // index of arc where tail currently is
            for (let kTrack = 0; kTrack < nbLines; ++kTrack) {
              let path = new Path2D();
              for (let k = kTail; k <= kHead; ++k) {
                if (k == kHead || k == kTail)
                  this.arcs[k].addPathPartial(
                    path,
                    kTrack,
                    this.headPos,
                    tailPos,
                  );
                else this.arcs[k].addPath(path, kTrack);
              } // for k
              ctx.lineWidth = trackWidth - 0.5;
              ctx.strokeStyle = this.colors[kTrack];
              ctx.stroke(path);
            } // for kTrack
          }
        } // class MotionPath
        //-----------------------------------------------------------------------------

        let animate;

        {
          // scope for animate

          let animState = 0;
          let mps = [];
          let currLines;
          let done;

          animate = function (tStamp) {
            let message;
            message = messages.shift();
            if (message && message.message == "reset") animState = 0;
            if (message && message.message == "click") animState = 0;
            window.requestAnimationFrame(animate);

            switch (animState) {
              case 0:
                if (startOver()) {
                  ++animState;
                }
                break;

              case 1:
                mps = [];
                lines.forEach((line) => {
                  if (intAlea(2)) reverseLine(line); // randomly reverse lines
                  for (let k = 0; k < nbLines; ++k)
                    mps.push(new MotionPath(line, k));
                });
                mps.forEach((mp) => mp.start(tStamp));
                lines.forEach((line) => {
                  let lng = line.motionPath.arcs.at(-1).pos1;
                  line.motionPath.deltaStart = 0;
                });
                done = []; // list of finished
                currLines = [];
                ++animState;

              case 2:
                animState++;

              case 3:
                if (speed == VALSPEED.at(-1)) {
                  animState = 5;
                  break;
                } // fulll throttle
                if (currLines.length == 0 && lines.length == 0) {
                  animState = 99;
                  break;
                }
                ctx.fillStyle = bg;
                ctx.fillRect(0, 0, maxx, maxy);
                if (currLines.length < 4 && lines.length > 0) {
                  let currLine = lines.splice(intAlea(lines.length), 1)[0];
                  currLine.motionPath.start(tStamp);
                  currLines.push(currLine);
                }
                done.forEach((line) => line.motionPath.draw(tStamp));
                for (let k = currLines.length - 1; k >= 0; --k) {
                  let alldone = true;
                  let mp = currLines[k].motionPath;
                  mp.draw(tStamp);
                  alldone &&= mp.doneTail && mp.doneHead;
                  if (alldone) {
                    done.push(currLines[k]);
                    currLines.splice(k, 1);
                  }
                }
                break;

              case 5:
                ctx.fillStyle = bg;
                ctx.fillRect(0, 0, maxx, maxy);
                tStamp = 1e10; // simulate much time ellapsed
                done.forEach((line) => line.motionPath.draw(tStamp));
                currLines.forEach((line) => line.motionPath.draw(tStamp));
                lines.forEach((line) => line.motionPath.draw(tStamp));
                animState = 99;
                break;
            } // switch
          }; // animate
        } // scope for animate

        //------------------------------------------------------------------------
        //------------------------------------------------------------------------

        function startOver() {
          // canvas dimensions

          maxx = window.innerWidth;
          maxy = window.innerHeight;

          canv.width = maxx;
          canv.height = maxy;
          //      ctx.lineJoin = 'round';
          //ctx.lineCap = 'round';

          ctx.fillStyle = "#000";
          ctx.fillRect(0, 0, maxx, maxy);

          radius = msqrt(maxx * maxy) / (6 + 15 * relY);

          // all hexagons fully visible
          nbx = mfloor((maxx / radius - 0.5) / 1.5);
          nby = mfloor(maxy / radius / rac3 - 0.5);
          // all screen covered with hexagons
          nbx = mceil(maxx / radius / 1.5 + 1);
          nby = mceil(maxy / radius / rac3 + 0.5);

          nbx = mmax(1, nbx);
          nby = mmax(1, nby);

          orgx = (maxx - radius * (1.5 * nbx + 0.5)) / 2 + radius; // obvious, insn't it ?
          orgy = (maxy - radius * rac3 * (nby + 0.5)) / 2 + radius * rac3; // yet more obvious

          createGrid();

          grid.forEach((line) =>
            line.forEach((cell) => {
              cell.setNeighbors();
              //cell.drawHexagon()
              //        cell.drawArcs()
            }),
          );
          lines = makeLines();

          nbLines = intAlea(1, 10);

          relTrackWidth = 1 / (nbLines + 0.5);
          trackWidth = (radius / 2) * relTrackWidth;

          let pth;
          ctx.lineWidth = trackWidth - 0.5;

          // create Arcs from data in segments
          lines.forEach((line) => {
            line.segments.forEach((segment) => {
              let cell = segment.cell;
              let edge = segment.kentry;
              if (cell.arcType[edge] == "s") {
                // small arc
                segment.arc = new Arc(
                  cell.vertices[edge],
                  ((nbLines + 1) / 2) * trackWidth,
                  (edge * mPI) / 3,
                  (edge + 2) * mPIS3,
                  false,
                );
              } else {
                // big arc
                segment.arc = new Arc(
                  cell.extCenters[edge],
                  ((nbLines + 1) / 2) * trackWidth + radius,
                  edge * mPIS3,
                  (edge + 1) * mPIS3,
                  false,
                );
              }
            });
          });

          lines.forEach((line) => {
            for (let k = 0; k < nbLines; ++k) {
              let alpha = (0.5 + k) / (nbLines + 1);
              ctx.strokeStyle = `hsl(${line.hue} ${line.sat}% ${80 - 60 * alpha}%)`;
              pth = getLinePath(line, k);
              ctx.stroke(pth);
            }
          });
          let hue = intAlea(360);
          let sat = intAlea(50, 100);
          bg = ctx.createLinearGradient(0, maxy, maxx, 0);
          let lum0, lum1;
          if (intAlea(2)) {
            lum0 = 10;
            lum1 = 20;
          } else {
            lum0 = 85;
            lum1 = 95;
          }
          bg.addColorStop(0, `hsl(${hue} ${sat}% ${lum0}%)`);
          bg.addColorStop(1, `hsl(${hue} ${sat}% ${lum1}%)`);

          return true;
        } // startOver

        //------------------------------------------------------------------------
        //------------------------------------------------------------------------
        function mouseMove(event) {
          cursorPosition(event.clientX, event.clientY);
        } // mouseMove
        //------------------------------------------------------------------------
        function touchMove(event) {
          if (event.touches.length == 1)
            cursorPosition(event.touches[0].clientX, event.touches[0].clientY);
        } // touchMove

        //------------------------------------------------------------------------
        function touchStart(event) {
          if (event.touches.length == 1)
            cursorPosition(event.touches[0].clientX, event.touches[0].clientY);
        } // touchStart
        //------------------------------------------------------------------------
        function touchEnd(event) {
          if (event.touches.length == 1)
            cursorPosition(event.touches[0].clientX, event.touches[0].clientY);
          // event.preventDefault();
        } // touchEnd

        //------------------------------------------------------------------------
        function touchMove(event) {
          if (event.touches.length == 1)
            cursorPosition(event.touches[0].clientX, event.touches[0].clientY);
        } // touchMove

        //------------------------------------------------------------------------
        function cursorPosition(x, y) {
          if (!Number.isFinite(maxx) || !Number.isFinite(maxy)) return;
          const relX = x / maxx;
          let k = POSSPEED.findIndex((v) => relX <= v);
          if (k == 0) speed = VALSPEED[0];
          else {
            let x0 = POSSPEED[k - 1],
              x1 = POSSPEED[k],
              y0 = VALSPEED[k - 1],
              y1 = VALSPEED[k];
            speed = y0 + ((y1 - y0) * (relX - x0)) / (x1 - x0);
          }
          relY = y / maxy;
        } // mouseMove

        //------------------------------------------------------------------------

        function mouseClick(event) {
          messages.push({ message: "click" });
        } // mouseClick

        //------------------------------------------------------------------------
        //------------------------------------------------------------------------
        // beginning of execution

        {
          canv = document.createElement("canvas");
          canv.style.position = "absolute";
          document.body.appendChild(canv);
          ctx = canv.getContext("2d");
          //      canv.setAttribute('title', 'click me');
        } // création CANVAS

        canv.addEventListener("click", mouseClick);
        canv.addEventListener("mousemove", mouseMove);
        canv.addEventListener("touchstart", touchStart);
        canv.addEventListener("touchmove", touchMove);
        canv.addEventListener("touchend", touchEnd);

        messages = [{ message: "reset" }];
        requestAnimationFrame(animate);
      </script>
    </body>
  </html>
